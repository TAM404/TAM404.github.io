#The Rabin-Karp algorithm
We have seen  ihow to search for a keyword *P* inside of a string *T* in the bruteforce approach  we shift through *T*'s positions  and compare the corresponding substring to starting from that position with *P*.
 Now what if we can compare *P* with the substring withouts going through both strings and comparing character by character.
what if we can reduce  a string/substring into an Integer, a *O(1)* comparable item.
##String hash
What we need is a unique integer representation of a string.
one initial way we can think about it is giving each character an integer weight, and summing the resulting values.
###first attempt
Let's define our hash function as sum of mapped values of all the characters in the string. The mapped value of ^a^ is ^1^, the mapped value of ^b^ is ^2^, and so on.
Using this ^abb^ will be mapped to ^1 + 2 + 2 = 5^. If two strings are equal, then their hash values will be equal. However, using this hashing approach, the reverse will not necessarily be True. If two hash values are equal, we can't say that the strings are also equal. ^aca^ will also map to ^5^, however, ^aca^ and ^abb^ are not equal. Thus, we can have lots of collisions.
###second attempt
We can take  inspiration from a number hashing method we all knew for millenniums, *decimal notation*. 
the decimal number system is built upon ^10^ symbols  ^0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9^
when you see a number representation like ^423^ , this just represents the following  decomposition: 
*423 = 4\*10\^2 + 2\*10\^1 + 3\*10\^0 *
where each symbol's corresponding value is multimplied by some constant ^10^ to the power of its position.

the same can be applied here, and mathematically it turns out we can get a unique number using this approach whatever the symbols are , as long as the *constant* (10 in this case) is more or equal to the number of symbols we have.

(((gray 
for more information: see *Hornerâ€™s Rule*
)))gray
thus we can represent our string through giving each character a value like before and multiplying that value by ^26^ ( if our string is only made up by lowercase english characters )
or ^256^ if its made up of all ASCII characters ,etc.

now this formula works fine, but our number will quickly overflow, thus we are forced to use *modular arithmetic* to get it back in range, which will have the unfortunate effect of reintroducing  the possibility of  *collisions*.
 but its still way less likely than the previous method.

so if  the hashes of two strings are not equal then we are *sure* that  the strings are not equal thus we switch to the next substring.
but if both hashes are equal, it means the strings *can be equal* but not necessarily which will require us to check them both using the naive method to confirm.

It turns out that we never explicitly need to compute the hash value of every m-substring. We only need to compute the hash value of the first m-substring . For the remaining m-substrings of haystack, we can:

*+* Multiply the hash value of the previous m-substring by *radix* ^26^
*+* Subtract the value of the first character of the previous m-substring, since we are moving the window by one character, and that character is now out of the window.
*+* Add the value of the last character of the current m-substring, since we are moving the window by one character.



  


we can make 

